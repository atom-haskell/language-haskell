'fileTypes': [
  'lhs'
]
'name': 'Literate Haskell'
'scopeName': 'text.tex.latex.haskell'
'macros':
  'functionNameOne': '[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*'
  'classNameOne': '[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*'
  'functionName': '(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*'
  'className': '[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*'
  'operatorChar': '[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_"\']]'
  'operator': '[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_"\']]+'
  'operatorFun': '(?:\\((?!--+\\))[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_"\']]+\\))'
  'character': '(?:[ -\\[\\]-~]|(\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\"\'\\&]))|(\\\\o[0-7]+)|(\\\\x[0-9A-Fa-f]+)|(\\^[A-Z@\\[\\]\\\\\\^_]))'
  'classConstraint': '(?:(?:([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*)\\s+)(?:(?<classConstraint>(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*|(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)(?:\\s*(?:\\s+)\\s*\\g<classConstraint>)?)))'
  'functionTypeDeclaration': '(?:(?:(?<functionTypeDeclaration>(?:(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*|(?:\\((?!--+\\))[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_"\']]+\\)))(?:\\s*(?:,)\\s*\\g<functionTypeDeclaration>)?))(?:\\s*(::|∷)))'
  'ctorArgs': '(?!deriving)(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*|(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*|(?:(?!deriving)(?:[\\w()\'→⇒\\[\\],]|->|=>)+\\s*)+)'
  'ctor': '(?:(?:\\b([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*)\\s+)(?:(?<ctorArgs>(?:(?!deriving)(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*|(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*|(?:(?!deriving)(?:[\\w()\'→⇒\\[\\],]|->|=>)+\\s*)+))(?:\\s*(?:\\s+)\\s*\\g<ctorArgs>)?)?))'
  'typeDecl': '.+?'
  'indentChar': '[ \\t]'
  'indentBlockEnd': '^(?!> \\1[ \\t].*[^ \\t]|> $)|^(?!> )'
  'maybeBirdTrack': '^> '
'patterns': [
  {
    'begin': '^((\\\\)begin)({)code(})(\\s*\\n)?'
    'beginCaptures':
      '1':
        'name': 'support.function.be.latex.haskell'
      '2':
        'name': 'punctuation.definition.function.latex.haskell'
      '3':
        'name': 'punctuation.definition.arguments.begin.latex.haskell'
      '4':
        'name': 'punctuation.definition.arguments.end.latex.haskell'
    'end': '^((\\\\)end)({)code(})'
    'endCaptures':
      '1':
        'name': 'support.function.be.latex.haskell'
      '2':
        'name': 'punctuation.definition.function.latex.haskell'
      '3':
        'name': 'punctuation.definition.arguments.begin.latex.haskell'
      '4':
        'name': 'punctuation.definition.arguments.end.latex.haskell'
    'contentName': 'source.haskell.embedded.latex.haskell'
    'name': 'meta.embedded.block.haskell.latex.haskell'
    'patterns': [
      {
        'include': 'source.haskell'
      }
    ]
  }
  {
    'begin': '^((\\\\)begin)({)spec(})(\\s*\\n)?'
    'beginCaptures':
      '1':
        'name': 'support.function.be.latex.haskell'
      '2':
        'name': 'punctuation.definition.function.latex.haskell'
      '3':
        'name': 'punctuation.definition.arguments.begin.latex.haskell'
      '4':
        'name': 'punctuation.definition.arguments.end.latex.haskell'
    'end': '^((\\\\)end)({)spec(})'
    'endCaptures':
      '1':
        'name': 'support.function.be.latex.haskell'
      '2':
        'name': 'punctuation.definition.function.latex.haskell'
      '3':
        'name': 'punctuation.definition.arguments.begin.latex.haskell'
      '4':
        'name': 'punctuation.definition.arguments.end.latex.haskell'
    'contentName': 'source.haskell.embedded.latex.haskell'
    'name': 'meta.embedded.block.haskell.latex.haskell'
    'patterns': [
      {
        'include': 'source.haskell'
      }
    ]
  }
  {
    'begin': '^(?=> )'
    'end': '^(?!> )'
    'name': 'meta.embedded.haskell'
    'patterns': [
      {
        'name': 'keyword.operator.function.infix.haskell'
        'match': '(`)(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(`)'
        'captures':
          '1':
            'name': 'punctuation.definition.entity.haskell'
          '2':
            'name': 'punctuation.definition.entity.haskell'
      }
      {
        'name': 'constant.language.unit.haskell'
        'match': '\\(\\)'
      }
      {
        'name': 'constant.language.empty-list.haskell'
        'match': '\\[\\]'
      }
      {
        'begin': '(\\[)([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)(\\|)'
        'end': '(\\|)(\\])'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.quasiquotes.begin.haskell'
          '2':
            'name': 'entity.name.tag.haskell'
          '3':
            'name': 'string.quoted.quasiquotes.haskell'
        'endCaptures':
          '1':
            'name': 'string.quoted.quasiquotes.haskell'
          '2':
            'name': 'punctuation.definition.quasiquotes.end.haskell'
        'contentName': 'string.quoted.quasiquotes.haskell'
      }
      {
        'name': 'meta.declaration.module.haskell'
        'begin': '\\b(module)\\b'
        'end': '(where)'
        'beginCaptures':
          '1':
            'name': 'keyword.other.haskell'
        'endCaptures':
          '1':
            'name': 'keyword.other.haskell'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'include': '#module_name'
          }
          {
            'include': '#module_exports'
          }
          {
            'name': 'invalid.haskell'
            'match': '[a-z]+'
          }
        ]
      }
      {
        'name': 'meta.declaration.class.haskell'
        'begin': '\\b(class)\\b'
        'end': '\\b(where)\\b|$'
        'beginCaptures':
          '1':
            'name': 'storage.type.class.haskell'
        'endCaptures':
          '1':
            'name': 'keyword.other.haskell'
        'patterns': [
          {
            'name': 'support.class.prelude.haskell'
            'match': '\\b(Monad|Functor|Eq|Ord|Read|Show|Num|(Frac|Ra)tional|Enum|Bounded|Real(Frac|Float)?|Integral|Floating)\\b'
          }
          {
            'include': '#type_name'
          }
          {
            'include': '#generic_type'
          }
        ]
      }
      {
        'name': 'meta.declaration.instance.haskell'
        'begin': '\\b(instance)\\b'
        'end': '\\b(where)\\b|$'
        'contentName': 'meta.type-signature.haskell'
        'beginCaptures':
          '1':
            'name': 'keyword.other.haskell'
        'endCaptures':
          '1':
            'name': 'keyword.other.haskell'
        'patterns': [
          {
            'include': '#type_signature'
          }
        ]
      }
      {
        'name': 'meta.foreign.haskell'
        'begin': '^> (\\s*)(foreign)\\s+(import|export)\\b'
        'end': '^(?!> \\1[ \\t].*[^ \\t]|> $)|^(?!> )'
        'beginCaptures':
          '2':
            'name': 'keyword.other.haskell'
          '3':
            'name': 'keyword.other.haskell'
        'patterns': [
          {
            'match': '(?:un)?safe'
            'captures':
              '0':
                'name': 'keyword.other.haskell'
          }
          {
            'include': '$self'
          }
        ]
      }
      {
        'name': 'meta.import.haskell'
        'begin': '\\b(import)\\b'
        'end': '($|;|(?=--))'
        'beginCaptures':
          '1':
            'name': 'keyword.other.haskell'
        'patterns': [
          {
            'include': '#module_name'
          }
          {
            'include': '#module_exports'
          }
          {
            'match': '\\b(qualified|as|hiding)\\b'
            'captures':
              '1':
                'name': 'keyword.other.haskell'
          }
        ]
      }
      {
        'name': 'meta.declaration.type.data.haskell'
        'begin': '^> (\\s)*(data|newtype)\\s+(.+?)\\s*(?=\\=|$)'
        'end': '^(?!> \\1[ \\t].*[^ \\t]|> $)|^(?!> )'
        'beginCaptures':
          '2':
            'name': 'storage.type.data.haskell'
          '3':
            'name': 'meta.type-signature.haskell'
            'patterns': [
              {
                'include': '#type_signature'
              }
            ]
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'include': '#deriving'
          }
          {
            'match': '='
            'captures':
              '0':
                'name': 'keyword.operator.assignment.haskell'
          }
          {
            'match': '(?:(?:\\b([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*)\\s+)(?:(?<ctorArgs>(?:(?!deriving)(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*|(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*|(?:(?!deriving)(?:[\\w()\'→⇒\\[\\],]|->|=>)+\\s*)+))(?:\\s*(?:\\s+)\\s*\\g<ctorArgs>)?)?))'
            'captures':
              '1':
                'patterns': [
                  {
                    'include': '#type_ctor'
                  }
                ]
              '2':
                'name': 'meta.type-signature.haskell'
                'patterns': [
                  {
                    'include': '#type_signature'
                  }
                ]
          }
          {
            'match': '\\|'
            'captures':
              '0':
                'name': 'punctuation.separator.pipe.haskell'
          }
          {
            'name': 'meta.declaratyion.type.data.record.block.haskell'
            'begin': '\\{'
            'beginCaptures':
              '0':
                'name': 'keyword.operator.record.begin.haskell'
            'end': '\\}'
            'endCaptures':
              '0':
                'name': 'keyword.operator.record.end.haskell'
            'patterns': [
              {
                'name': 'punctuation.separator.comma.haskell'
                'match': ','
              }
              {
                'include': '#record_field_declaration'
              }
            ]
          }
        ]
      }
      {
        'name': 'meta.declaration.type.type.haskell'
        'begin': '^> (\\s)*(type)\\s+(.+?)\\s*(?=\\=|$)'
        'end': '^(?!> \\1[ \\t].*[^ \\t]|> $)|^(?!> )'
        'contentName': 'meta.type-signature.haskell'
        'beginCaptures':
          '2':
            'name': 'storage.type.data.haskell'
          '3':
            'name': 'meta.type-signature.haskell'
            'patterns': [
              {
                'include': '#type_signature'
              }
            ]
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'match': '='
            'captures':
              '0':
                'name': 'keyword.operator.assignment.haskell'
          }
          {
            'include': '#type_signature'
          }
        ]
      }
      {
        'name': 'keyword.other.haskell'
        'match': '\\b(deriving|where|data|type|newtype)\\b'
      }
      {
        'name': 'storage.type.haskell'
        'match': '\\b(data|type|newtype)\\b'
      }
      {
        'name': 'keyword.operator.haskell'
        'match': '\\binfix[lr]?\\b'
      }
      {
        'name': 'keyword.control.haskell'
        'match': '\\b(do|if|then|else|case|of|let|in|default)\\b'
      }
      {
        'name': 'constant.numeric.float.haskell'
        'match': '\\b([0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\b'
      }
      {
        'name': 'constant.numeric.haskell'
        'match': '\\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\\b'
      }
      {
        'name': 'meta.preprocessor.c.haskell'
        'match': '^> \\s*(#)\\s*\\w+'
        'captures':
          '1':
            'name': 'punctuation.definition.preprocessor.c.haskell'
      }
      {
        'include': '#pragma'
      }
      {
        'name': 'string.quoted.double.haskell'
        'begin': '"'
        'end': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.haskell'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.haskell'
        'patterns': [
          {
            'include': '#characters'
          }
          {
            'begin': '\\\\\\s'
            'end': '\\\\'
            'beginCaptures':
              '0':
                'name': 'markup.other.escape.newline.begin.haskell'
            'endCaptures':
              '0':
                'name': 'markup.other.escape.newline.end.haskell'
            'patterns': [
              {
                'match': '\\S+'
                'name': 'invalid.illegal.character-not-allowed-here.haskell'
              }
            ]
          }
        ]
      }
      {
        'name': 'markup.other.escape.newline.haskell'
        'match': '\\\\$'
      }
      {
        'name': 'string.quoted.single.haskell'
        'match': '(\')((?:[ -\\[\\]-~]|(\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\"\'\\&]))|(\\\\o[0-7]+)|(\\\\x[0-9A-Fa-f]+)|(\\^[A-Z@\\[\\]\\\\\\^_])))(\')'
        'captures':
          '1':
            'name': 'punctuation.definition.string.begin.haskell'
          '2':
            'patterns': [
              {
                'include': '#characters'
              }
            ]
          '7':
            'name': 'punctuation.definition.string.end.haskell'
      }
      {
        'include': '#function_type_declaration'
      }
      {
        'match': '\\b(Just|Left|Right|Nothing|True|False|LT|EQ|GT)\\b'
        'name': 'support.tag.haskell'
      }
      {
        'include': '#type_ctor'
      }
      {
        'include': '#comments'
      }
      {
        'name': 'support.function.prelude.haskell'
        'match': '\\b(abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b'
      }
      {
        'include': '#infix_op'
      }
      {
        'name': 'keyword.operator.haskell'
        'match': '[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_"\']]+'
      }
      {
        'name': 'punctuation.separator.comma.haskell'
        'match': ','
      }
      {
        'match': '^> '
        'name': 'punctuation.definition.bird-track.haskell'
      }
    ]
  }
  {
    'include': 'text.tex.latex'
  }
]
'repository':
  'block_comment':
    'patterns': [
      {
        'name': 'comment.block.haddock.haskell'
        'begin': '\\{-\\s*[|^]'
        'end': '-\\}'
        'applyEndPatternLast': 1
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.haddock.haskell'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.haddock.haskell'
        'patterns': [
          {
            'include': '#block_comment'
          }
        ]
      }
      {
        'name': 'comment.block.haskell'
        'begin': '\\{-(?!#)'
        'end': '-\\}'
        'applyEndPatternLast': 1
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.haskell'
        'patterns': [
          {
            'include': '#block_comment'
          }
        ]
      }
    ]
  'comments':
    'patterns': [
      {
        'begin': '(^> [ \\t]+)?(?=--+\\s+[|^])'
        'end': '(?!\\G)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.haskell'
        'patterns': [
          {
            'name': 'comment.line.double-dash.haddock.haskell'
            'begin': '(--+)\\s+([|^])'
            'end': '\\n'
            'beginCaptures':
              '1':
                'name': 'punctuation.definition.comment.haskell'
              '2':
                'name': 'punctuation.definition.comment.haddock.haskell'
          }
        ]
      }
      {
        'begin': '(^> [ \\t]+)?(?=--+(?![\\p{S}\\p{P}&&[^(),;\\[\\]`{}_"\']]))'
        'end': '(?!\\G)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.haskell'
        'patterns': [
          {
            'name': 'comment.line.double-dash.haskell'
            'begin': '--'
            'end': '\\n'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.haskell'
          }
        ]
      }
      {
        'include': '#block_comment'
      }
    ]
  'characters':
    'patterns': [
      {
        'match': '(?:[ -\\[\\]-~]|(\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\"\'\\&]))|(\\\\o[0-7]+)|(\\\\x[0-9A-Fa-f]+)|(\\^[A-Z@\\[\\]\\\\\\^_]))'
        'captures':
          '1':
            'name': 'constant.character.escape.haskell'
          '2':
            'name': 'constant.character.escape.octal.haskell'
          '3':
            'name': 'constant.character.escape.hexadecimal.haskell'
          '4':
            'name': 'constant.character.escape.control.haskell'
      }
    ]
  'infix_op':
    'patterns': [
      {
        'name': 'entity.name.function.infix.haskell'
        'match': '(?:\\((?!--+\\))[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_"\']]+\\))'
      }
    ]
  'module_exports':
    'patterns': [
      {
        'name': 'meta.declaration.exports.haskell'
        'begin': '\\('
        'end': '\\)'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'name': 'entity.name.function.haskell'
            'match': '\\b(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*'
          }
          {
            'include': '#type_name'
          }
          {
            'name': 'punctuation.separator.comma.haskell'
            'match': ','
          }
          {
            'include': '#infix_op'
          }
          {
            'name': 'meta.other.constructor-list.haskell'
            'match': '\\(.*?\\)'
          }
        ]
      }
    ]
  'module_name':
    'patterns': [
      {
        'name': 'support.other.module.haskell'
        'match': '(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)*[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.?'
      }
    ]
  'pragma':
    'patterns': [
      {
        'name': 'meta.preprocessor.haskell'
        'begin': '\\{-#'
        'end': '#-\\}'
        'patterns': [
          {
            'match': '\\b(LANGUAGE|UNPACK|INLINE)\\b'
            'name': 'keyword.other.preprocessor.haskell'
          }
        ]
      }
    ]
  'function_type_declaration':
    'patterns': [
      {
        'name': 'meta.function.type-declaration.haskell'
        'begin': '(?:(?:^> (\\s*))(?:(?:(?:(?<functionTypeDeclaration>(?:(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*|(?:\\((?!--+\\))[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_"\']]+\\)))(?:\\s*(?:,)\\s*\\g<functionTypeDeclaration>)?))(?:\\s*(::|∷)))))'
        'end': '^(?!> \\1[ \\t].*[^ \\t]|> $)|^(?!> )'
        'contentName': 'meta.type-signature.haskell'
        'beginCaptures':
          '2':
            'patterns': [
              {
                'name': 'entity.name.function.haskell'
                'match': '(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*'
              }
              {
                'include': '#infix_op'
              }
            ]
          '3':
            'name': 'keyword.other.double-colon.haskell'
        'patterns': [
          {
            'include': '#type_signature'
          }
        ]
      }
    ]
  'record_field_declaration':
    'patterns': [
      {
        'name': 'meta.record-field.type-declaration.haskell'
        'begin': '(?:(?:(?<functionTypeDeclaration>(?:(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*|(?:\\((?!--+\\))[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_"\']]+\\)))(?:\\s*(?:,)\\s*\\g<functionTypeDeclaration>)?))(?:\\s*(::|∷)))'
        'end': '(?=(?:(?:(?<functionTypeDeclaration>(?:(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*|(?:\\((?!--+\\))[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_"\']]+\\)))(?:\\s*(?:,)\\s*\\g<functionTypeDeclaration>)?))(?:\\s*(::|∷)))|})'
        'contentName': 'meta.type-signature.haskell'
        'beginCaptures':
          '1':
            'patterns': [
              {
                'name': 'entity.other.attribute-name.haskell'
                'match': '(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*'
              }
              {
                'include': '#infix_op'
              }
            ]
          '2':
            'name': 'keyword.other.double-colon.haskell'
        'patterns': [
          {
            'include': '#type_signature'
          }
        ]
      }
    ]
  'type_signature':
    'patterns': [
      {
        'name': 'meta.class-constraints.haskell'
        'match': '(?:(?:\\()(?:(?<classConstraints>(?:(?:(?:([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*)\\s+)(?:(?<classConstraint>(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*|(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)(?:\\s*(?:\\s+)\\s*\\g<classConstraint>)?))))(?:\\s*(?:,)\\s*\\g<classConstraints>)?))(?:\\))(?:\\s*(=>|⇒)))'
        'captures':
          '1':
            'patterns': [
              {
                'include': '#class_constraint'
              }
            ]
          '4':
            'name': 'keyword.other.big-arrow.haskell'
      }
      {
        'name': 'meta.class-constraints.haskell'
        'match': '((?:(?:([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*)\\s+)(?:(?<classConstraint>(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*|(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)(?:\\s*(?:\\s+)\\s*\\g<classConstraint>)?))))\\s*(=>|⇒)'
        'captures':
          '1':
            'patterns': [
              {
                'include': '#class_constraint'
              }
            ]
          '4':
            'name': 'keyword.other.big-arrow.haskell'
      }
      {
        'include': '#pragma'
      }
      {
        'name': 'keyword.other.arrow.haskell'
        'match': '->|→'
      }
      {
        'name': 'keyword.other.big-arrow.haskell'
        'match': '=>|⇒'
      }
      {
        'name': 'support.class.prelude.haskell'
        'match': '\\b(Int(eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(Error)?)\\b'
      }
      {
        'include': '#generic_type'
      }
      {
        'include': '#type_name'
      }
      {
        'include': '#unit'
      }
      {
        'include': '#comments'
      }
    ]
  'type_name':
    'patterns': [
      {
        'name': 'entity.name.type.haskell'
        'match': '\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\b'
      }
    ]
  'type_ctor':
    'patterns': [
      {
        'name': 'entity.name.tag.haskell'
        'match': '\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\b'
      }
    ]
  'unit':
    'patterns': [
      {
        'name': 'constant.language.unit.haskell'
        'match': '\\(\\)'
      }
    ]
  'generic_type':
    'patterns': [
      {
        'name': 'variable.other.generic-type.haskell'
        'match': '\\b(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*\\b'
      }
    ]
  'class_constraint':
    'patterns': [
      {
        'name': 'meta.class-constraint.haskell'
        'match': '(?:(?:([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*)\\s+)(?:(?<classConstraint>(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*|(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)(?:\\s*(?:\\s+)\\s*\\g<classConstraint>)?)))'
        'captures':
          '1':
            'patterns': [
              {
                'name': 'entity.other.inherited-class.haskell'
                'match': '\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\b'
              }
            ]
          '2':
            'patterns': [
              {
                'include': '#type_name'
              }
              {
                'include': '#generic_type'
              }
            ]
      }
    ]
  'deriving':
    'patterns': [
      {
        'include': '#deriving_list'
      }
      {
        'include': '#deriving_simple'
      }
      {
        'include': '#deriving_keyword'
      }
    ]
  'deriving_keyword':
    'patterns': [
      {
        'name': 'meta.deriving.haskell'
        'match': '(deriving)'
        'captures':
          '1':
            'name': 'keyword.other.haskell'
      }
    ]
  'deriving_list':
    'patterns': [
      {
        'name': 'meta.deriving.haskell'
        'begin': '(deriving)\\s*\\('
        'end': '\\)'
        'beginCaptures':
          '1':
            'name': 'keyword.other.haskell'
        'patterns': [
          {
            'match': '\\b([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*)\\b'
            'captures':
              '1':
                'name': 'entity.other.inherited-class.haskell'
          }
        ]
      }
    ]
  'deriving_simple':
    'patterns': [
      {
        'name': 'meta.deriving.haskell'
        'match': '(deriving)\\s*([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*)'
        'captures':
          '1':
            'name': 'keyword.other.haskell'
          '2':
            'name': 'entity.other.inherited-class.haskell'
      }
    ]
